// 第零步：因为 koa 是一个三方框架，所以需要先安装它
// cd 到项目根目录，执行命令 npm install koa 即可（比如我们这里的项目就是“03_使用三方 koa 框架开发”，后面的学习都是在这一个项目里学习）
// 此外我们需要知道：koa 跟 express 有一个很大的区别是，express 内置了很多常用的中间件，我们安装完 express 就能直接使用这些中间件了，而 koa 没有内置中间件，我们用到某些中间件时需要手动安装

// 第一步：导入 koa 框架
// 注意：koa 框架导出的是一个类而不是一个函数，所以这里我们用大驼峰来命名
const Koa = require("koa");

// 第二步：创建一个 koa 服务器实例
// 约定俗成地我们会把这个服务器实例命名为 app
// 注意：koa 框架导出的是一个类而不是一个函数，所以这里需要用 new 关键字来创建实例
const app = new Koa();

// 第三步：指定要监听的端口并启动 koa 服务器
// 第一个参数：要监听的端口（即服务要部署在哪个端口上）
// 第二个参数：koa 服务器启动成功后的回调函数
// 
// 因为我们编写的这份代码（即服务）会部署在某个特定的服务器上（即主机），将来客户端访问时会通过 IP 地址或域名来找到相应的服务器，所以是不需要指定主机的，只需要指定端口即可
app.listen(8000, () => {
  console.log("🚀服务器启动成功🚀");
});

// 第四步：监听来自客户端的请求并返回响应
// 
// express 框架的中间件函数接收三个参数，而 koa 框架的中间件函数只接收两个参数
//  第一个参数：上下文对象（context），请求对象和响应对象都被封装在这个 ctx 里了
//  第二个参数：next 函数，用于调用下一个中间件
app.use((ctx, next) => {
  // 返回响应、结束本次请求
  ctx.body = "Hello Koa!";
});

// 第五步：手动运行 http 服务器测试看看效果（实际部署的话，我们不需要手动运行，而是交给服务器自动运行，部署流程后面专门说）
// cd 到当前文件夹，执行“node 01_基本使用.js”命令，服务器就运行起来了
// 打开 Postman，访问 http://localhost:8000 或 http://127.0.0.1:8000（因为手动运行时服务器是跑在本地的，所以访问时是通过 localhost 或 127.0.0.1 来访问）就可以了
// 注意：通过 node 来手动运行，每次修改了服务器的代码后，都需要重新运行服务器，否则服务器不会自动更新
// 
// 所以为了让服务器能在修改代码后自动更新，我们可以使用 nodemon 工具来运行服务器
// 首先执行命令全局安装 nodemon：npm install nodemon -g
// 然后使用 nodemon 运行服务器：cd 到当前文件夹，执行“nodemon 01_基本使用.js”命令，服务器就运行起来了


