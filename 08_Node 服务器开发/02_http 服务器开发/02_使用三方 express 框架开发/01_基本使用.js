// 第零步：因为 express 是一个三方框架，所以需要先安装它
// cd 到项目根目录，执行命令 npm install express 即可（比如我们这里的项目就是“02_使用三方 express 框架开发”，后面的学习都是在这一个项目里学习）

// 第一步：导入 express 框架
const express = require("express");

// 第二步：创建一个 express 服务器实例
// 约定俗成地我们会把这个服务器实例命名为 app
const app = express();

// 第三步：指定要监听的端口并启动 express 服务器
// 第一个参数：要监听的端口（即服务要部署在哪个端口上）
// 第二个参数：express 服务器启动成功后的回调函数
// 
// 因为我们编写的这份代码（即服务）会部署在某个特定的服务器上（即主机），将来客户端访问时会通过 IP 地址或域名来找到相应的服务器，所以是不需要指定主机的，只需要指定端口即可
app.listen(8000, () => {
  console.log("🚀服务器启动成功🚀");
});

// 第四步：监听来自客户端的请求并返回响应
// 
// 注意：express 框架跟 http 模块不同的是，http 模块是所有的请求都会触发同一个“request”事件，我们需要在 request 事件里自己判断请求方法和请求路径，而 express 框架是根据请求方法和请求路径来触发不同的“事件”，我们只需要监听这一个一个独立的“事件”即可
// 
// 调用的方法：如果是 get 请求那就调用 get 方法，如果是 post 请求那就调用 post 方法
// 第一个参数：请求路径
// 第二个参数：回调函数，回调函数中会传入三个参数
//    请求对象（request）：本质就是一个 ReadableStream，用来读取客户端发过来的请求数据。包含了客户端请求服务器时的所有信息，如请求方法、请求路径、请求头、请求体等
//    响应对象（response）：本质就是一个 WritableStream，用来写入响应数据给客户端。包含了服务器要返回给客户端的所有信息，如响应状态码、响应头、响应体等
//    next 函数，Express 框架内置的一个函数，用于调用下一个中间件
app.post("/login", (req, res, next) => {
  // 返回响应、结束本次请求
  res.end("登录成功");
});
app.get("/songList", (req, res) => {
  // 返回响应、结束本次请求
  res.end("获取歌单成功");
});

// 第五步：手动运行 http 服务器测试看看效果（实际部署的话，我们不需要手动运行，而是交给服务器自动运行，部署流程后面专门说）
// cd 到当前文件夹，执行“node 01_基本使用.js”命令，服务器就运行起来了
// 打开 Postman，访问 http://localhost:8000 或 http://127.0.0.1:8000（因为手动运行时服务器是跑在本地的，所以访问时是通过 localhost 或 127.0.0.1 来访问）就可以了
// 注意：通过 node 来手动运行，每次修改了服务器的代码后，都需要重新运行服务器，否则服务器不会自动更新
// 
// 所以为了让服务器能在修改代码后自动更新，我们可以使用 nodemon 工具来运行服务器
// 首先执行命令全局安装 nodemon：npm install nodemon -g
// 然后使用 nodemon 运行服务器：cd 到当前文件夹，执行“nodemon 01_基本使用.js”命令，服务器就运行起来了


