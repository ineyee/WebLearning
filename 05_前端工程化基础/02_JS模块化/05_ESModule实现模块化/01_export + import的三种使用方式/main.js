// 导入方式一：import全部导入法（比较常用）
// “*”代表导入模块内全部导出的东西
// 使用全部导入法时我们必然得给导入的东西取个名字、否则就没法使用导入的东西，相当于强制我们实现了Dart里的“import as”来避免冲突
//
// 注意：就算main.js和file1.js、file2.js、file3.js在同一个文件夹下，导入时也不能省略“./”，“./”代表当前文件夹
import * as module1 from "./file1.js";

// 导入方式二：import部分导入法（也比较常用）
// 可以按需只导入我们需要使用的东西，不是必须得导入全部的东西
// 这里的{}同样不是一个map，而是一个专门用来跟import关键字联合使用的语法
// {}里导入东西的原名一定要跟导出时的名字一样，别名就可以随便取了
//
// 注意：就算main.js和file1.js、file2.js、file3.js在同一个文件夹下，导入时也不能省略“./”，“./”代表当前文件夹
import {
  personName,
  run as run2,
} from "./file2.js";

// 导入方式三：import默认导入法（也比较常用）
// 使用默认导入法导入时不能写大括号{}
// 但是我们必须得给导入的东西取个名字、否则就没法使用导入的东西，相当于强制我们实现了Dart里的“import as”来避免冲突
//
// 注意：就算main.js和file1.js、file2.js、file3.js在同一个文件夹下，导入时也不能省略“./”，“./”代表当前文件夹
import run3 from "./file3.js";


console.log(module1.personName); // 张三
module1.run(); // 张三 run

console.log(personName); // 李四
run2(); // 李四 run

run3();


/*
  实际开发中我们怎么写export？
  1、当我们想整体导出时就使用整体导出法，导入时可以使用全部导入法和部分导入法来导入
  2、当我们想单独导出时就使用单独导出法，导入时可以使用全部导入法和部分导入法来导入
  3、当我们想默认导出时就使用默认导出法，导入时只能使用默认导入法导入
*/

/*
  实际开发中我们怎么写import？
  1、导入系统内置模块时
    * from后面直接就是一个名字，不可能是一个路径
    * import的具体写法要查看系统内置模块的文档看看是通过整体导出法、单独导出法还是默认导出法导出的，进而选择不同的导入方法
  如：import http from "http";
  2、导入三方库的模块时也是同理
    * from后面直接就是一个名字，不可能是一个路径
    * import的具体写法要查看三方库的文档看看是通过整体导出法、单独导出法还是默认导出法导出的，进而选择不同的导入方法
  如：import { creareApp } from "vue";
  3、导入项目里我们自己编写的模块时
    * from后面必须是个路径————肯定是以“./”或“../”开头的路径
    * import的具体写法要看我们自己是通过整体导出法、单独导出法还是默认导出法导出的，进而选择不同的导入方法
  如：import run3 from "./file3.js";
*/