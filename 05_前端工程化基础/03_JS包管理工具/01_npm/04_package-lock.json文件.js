/*
  1、package-lock.json文件也是我们项目的配置文件，里面记录最重要的就是我们的项目真正安装了哪个版本的依赖
  实际开发中，这个文件都是由npm自动创建和维护的，我们一般不会来手动修改这个文件
*/

// 2、package-lock.json文件必须是一个标准的json文件，所以里面不能写注释，我们把注释写在这里
const packageLockJson = {
  // 项目的名字
  "name": "npm_demo03",
  // 项目的版本号
  "version": "1.0.0",

  // 当前package-lock.json文件本身的版本，毕竟这个文件本身也可能发生变化
  "lockfileVersion": 3,

  // 要不要使用requires来跟踪模块的依赖关系
  // 当这个值为true时，就会像下面一样维护dayjs这个库内部所依赖的其它库
  // 当这个值为false时，就不会像下面一样维护了，而是其它形式
  "requires": true,

  // 项目所有的依赖
  "packages": {
    // 项目依赖了dayjs
    "node_modules/dayjs": {
      // 项目真正安装的是1.11.13版本的dayjs
      "version": "1.11.13",
      // dayjs在npm registry仓库的压缩包
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.13.tgz",
      // dayjs在电脑缓存仓库的摘要，用于在电脑缓存仓库里查找dayjs
      "integrity": "sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==",
      // dayjs的开源协议
      "license": "MIT",
      // dayjs本身的依赖（生产环境 + 开发环境）
      "dependencies": {},
      // dayjs本身的依赖（开发环境）
      "devDependencies": {}
    }
  }
};

/*
  3、我们简单捋一下npm到底是沿着哪条线路完成依赖库的安装的——即“npm install”命令的原理
  * 第一步：cd到项目根目录，执行“npm install”命令
  * 第二步：首先npm会找到项目的package.json文件，根据里面的
    "dependencies": {
      "dayjs": "^1.11.13"
    }
    知道项目依赖了哪些库，比如这里npm知道项目依赖了三方库dayjs
  * 第三步：然后npm就会拿着dayjs，去package-lock.json文件里查找它到底使用了哪个版本，根据的是
    "node_modules/dayjs": {
      "version": "1.11.13",
      "integrity": "sha512-oaMBel6gjolK862uaPQOVTA7q3TZhuSvuMQAAglQDOWYO9A91IrAOUJEyKVlqJlHE0vq5p5UXxzdPfMH/x6xNg==",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.13.tgz"
    }
    比如这里npm知道了dayjs使用的版本是1.11.13
  * 第四步：然后npm会拿着integrity去电脑磁盘上的npm缓存仓库里查找1.11.13版本的dayjs的压缩包，找到的话就解压这个压缩包，并放到我们项目里的node_modules文件夹下，就算完成安装；找不到的话npm会拿着resolved去npm registry仓库下载1.11.13版本的dayjs的压缩包，下载下来后把压缩包放到电脑磁盘上的npm缓存仓库里，解压这个压缩包，并放到我们项目里的node_modules文件夹下，就算完成安装（我们的电脑磁盘上是有一个npm缓存仓库的，里面存储着很多包及其各个版本，为的就是我们开发的多个项目如果都依赖了一些共同的包，不必每个项目都从npm registry仓库下载、浪费时间）
*/

/*
  4、我们需要把package-lock.json文件加入版本控制
  实际开发中，我们需要把package-lock.json文件加入版本控制，主要是为了确保大家在协作开发安装依赖时仍然能安装到一致的版本，进而避免在开发时出现API的兼容性冲突，因为package-lock.json文件里才存储着我们的项目真正安装了哪个版本的库，package.json文件里只是给了宽松范围的版本、其主要目的是记录我们的项目使用了哪些库，具体的版本是package-lock.json文件负责记录的
*/