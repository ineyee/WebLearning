// TS 是空安全的，比如 string 类型肯定只能赋值字符串、而不能赋值为 null，如果想赋值为 null，那就使用联合类型 string | null，类似于 String?

/*
  一、自动类型推断和动态类型语言
  Swift里定义一个变量的格式为[var name: String = "zhangsan";]或[var name = "zhangsan";]，可以不指定变量的数据类型、不指定数据类型不代表变量没有数据类型，因为Swift里有自动类型推断，Swift里的自动类型推断是在【编译时】进行的
  TS里定义一个变量的格式为[let name: string = "zhangsan";]或[let name = "zhangsan";]，可以不指定变量的数据类型、不指定数据类型不代表变量没有数据类型，因为TS里也有自动类型推断，TS里的自动类型推断是在【编译时】进行的
  JS里定义一个变量的格式为[let name = "zhangsan";]，可以不指定变量的数据类型、不指定数据类型不代表变量没有数据类型，因为JS里也有自动类型推断，只不过JS里的自动类型推断是在【运行时】进行的

  Swift和TS是一门静态类型语言，是指name变量一旦被自动推断为了String和string类型，那它就不能再被赋值为其它数据类型的值，只能保持String和string类型
  name = 10; // 报错
  name = "lisi"; // 可以
  JS是一门动态类型语言，是指name变量就算被自动推断为了string类型，但它还是能再被赋值为其它任意数据类型的值，动态类型语言是把双刃剑，好处是灵活，坏处是容易出错
  name = 10; // 可以
  name = "lisi"; // 可以
*/

/*
  二、数据类型分类
  TS里的数据类型分类为：
  1、基本数据类型 <==> 值类型（3个）
    * boolean：布尔类型
      * 有对应的包装类型，但是我们不用特别关心
    * number：数值类型，包含了其它语言里的整型和浮点型
      * 有对应的包装类型，但是我们不用特别关心
    * string：字符串类型，其它语言里字符串是对象数据类型而非基本数据类型
      * string本质上是一个基本数据类型
      * 但是在使用时JS引擎会自动帮我们做装箱（装箱成对象数据类型）、拆箱（拆箱回基本数据类型）操作，以便使用一些属性和方法，因此使用起来类似于OC里的对象数据类型NSString
  2、对象数据类型 <==> 引用类型（3个）
    * array：数组类型，TS里的数组是个泛型集合，它的类型为T[]或Array<T>，T[]为语法糖
    * object：对象类型，也就是其它语言里的字典类型，TS里的字典是个泛型集合，它的类型为{[key: T1]: T2;}或Record<T1, T2>，Record<T1, T2>为语法糖，代表字典里的key是T1类型、value是T2类型，如{[key: string]: any}和Record<string, any>类似于别的语言里的Dictionary<String, Any>、Map<String, dynamic>...；而如果把它不从字典的角度而是从对象的角度考虑时，它的类型为：{属性名1: 属性1的类型, 属性名2: 属性2的类型...}
    * function：函数类型
  3、特殊数据类型（5个）
    * undefined：未定义类型
      * 没有对应的包装类型
    * null：空类型
      * 没有对应的包装类型
    * any：任意类型
      * 没有对应的包装类型
    * unknown：任意类型
      * 没有对应的包装类型
      * 跟 any 类型非常像，也代表任意类型，但是跟 any 的区别是：我们对 any 类型的变量做任何操作都是能编译通过的，如果有错的话只能是在运行时报错，所以不是那么安全；而我们对 unknown 类型的变量做任何操作都是编译不通过的，绝对不可能拖到运行时再报错，反倒是要求我们开发者在编写代码阶段就做好判断，所以更加安全
    * void：函数无返回值类型
      * 没有对应的包装类型
/*
  三、typeof运算符和instanceof运算符
  JS里提供了两种常用的方式来判断一个变量是哪种类型，typeof运算符和instanceof运算符：
  * typeof运算符可以应用于任意数据类型的变量，返回一个字符串，能得到某个变量的数据类型的字符串格式
  * instanceof运算符只可以应用于对象数据类型的变量，返回一个布尔值，用来判断一个对象是否是某个类的实例
*/