// 元组类似于数组或字典，也可以用来定义一组数据，但是元组没有具体的类型，等号右边是什么样子的数据，它就是什么类型

// 比如我们要存储一个人的姓名、年龄、身高

/*
  一、用数组来存储的话

  数组的类型是：数据类型[]
  数据类型代表数组内所有元素的数据类型、只要写一个就行了，而且数据类型是写在[]前面的
*/
let arr: any[] = ["张三", 18, 1.88];
console.log(arr[0]);
console.log(arr[1]);
console.log(arr[2]);

/*
  二、用字典来存储的话

  字典的类型是：Record<key的数据类型, value的数据类型>
  key的数据类型代表map内所有key的数据类型，value的数据类型代表map内所有value的数据类型
*/
let map: Record<string, any> = {
  name: "张三",
  age: 18,
  height: 1.88
};
console.log(map.name);
console.log(map.age);
console.log(map.height);

/*
  三、用元组来存储的话

  元组的类型是：[元素1的数据类型, 元素2的数据类型, 元素3的数据类型, ...]
  元组的类型里得标明集合里每一个元素的数据类型、有多少个元素就得写多少个数据类型、并且数据类型得跟元素的index一一对应，数据类型是在[]里面的
*/
let tuple: [string, number, number] = ["张三", 18, 1.88];
console.log(tuple[0]);
console.log(tuple[1]);
console.log(tuple[2]);

/*
  四、跟数组、字典的对比
  很多其它编程语言里直接定死了数组只能存储相同类型的元素，但是 JS 和 TS 里数组可以存储不同类型的元素，当然我们建议数组里只存储相同类型的元素，如果非要在一个集合里存储不同类型的元素，那就用元组吧

  很多其它编程语言里没有元组这种东西，所以想存储不同类型的元素时，只能用map，大家也都是这么用的，但是我们可以强行给map找一个不足，那就是有些情况下我们只是想存储几个不同类型的元素，至于这些元素叫啥名字其实并不关心、甚至给这么多变量取名都是件不好取的事、要是不用取名能直接像数组那样直接存进去就好了，此时就用元组吧

  总之，当需要【存储不同类型的元素 + 你又不想给元素一一取名】这两个条件都满足时，就用元组吧
*/

/*
  五、元组的实际应用场景

  主要用来作为函数的返回值，来实现多返回值的效果
  当然我们也可以用数组和map来实现返回值的效果，但是最好用元组的原因就是上面的原因
*/
function func(): [string, number, number] {
  return ["张三", 18, 1.88];
}
console.log(func());