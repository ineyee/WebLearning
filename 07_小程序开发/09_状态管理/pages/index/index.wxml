<!--index.wxml-->
<!--
  在 Vue 开发、Flutter 开发里，状态管理有两大用途：
  1、跨组件的数据通信
    * 前面我们在学习组件间的通信时提到了跨组件的数据通信，那里只学习了事件总线来实现，但其实状态管理也是跨组件数据通信的一个很好实现方式 
  2、状态与视图分离
    * 传统上我们的状态和视图是直接写在一个文件里的，这样有可能会造成代码的臃肿和逻辑重复，有了状态管理后我们就可以将状态和视图给分离开来，更便于理解和维护
    * 同时将状态抽离出来后，我们也可以更好地管理状态的生命周期，比如页面退出后状态是否应该保留、是否需要重置等
  
  在小程序开发里，状态管理的用途主要就是跨组件的数据通信，因为一个界面和组件都有 4 个文件，状态和视图已经分离了

  这里我们编写一个 demo 来看看怎么在小程序里怎么进行状态管理：
  * counter1 组件和 counter2 组件共享一个数据 counter
  * counter1 组件里能修改 counter，counter2 组件里也能修改 counter
  如果不用状态管理，那数据 counter 就得定义在 counter1 组件和 counter2 组件所在的界面里，然后还要各种事件回调来实现；有了状态管理后，这种跨组件的通信就会简单些
-->
<view class="index-page">
  <counter1></counter1>
  <counter2></counter2>
</view>